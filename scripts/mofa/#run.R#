args <- commandArgs()

help <- function(){
    cat("compare_corr.R :
Compares accessibility/RNA correlation and methylation/RNA correlation\n")
    cat("Usage: \n")
    cat("--name        : name for output model                  [required]\n")
    cat("--outdir      : output directory                       [required]\n")
    cat("--data        : data matrix list                       [required]\n")
    cat("--scale       : TRUE or FALSE                          [required]\n")
    cat("--factor      : number of latent factors in model      [default = 10]\n")
    cat("\n")
    q()
}

io   <- list()
opts <- list()

## Save values of each argument
if( !is.na(charmatch("--help",args)) || !is.na(charmatch("--help",args)) ){
    help()
} else {
    io$data     <- sub( '--data=', '', args[grep('--data', args)] )
    io$trial    <- sub( '--name=', '', args[grep('--name', args)] )
    io$outdir   <- sub( '--outdir=', '', args[grep('--outdir', args)] )
    opts$scale  <- sub( '--scale=', '', args[grep('--scale', args)] )
    num_factor  <- sub( '--factor=', '', args[grep('--factor', args)] )
}

if (identical(num_factor,character(0))){
   opts$factor <- 10
}else{
   opts$factor <- as.numeric(num_factor)
}

suppressMessages(library(MOFA2))
suppressMessages(library(data.table))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
suppressMessages(library(scater))
suppressMessages(library(reticulate))
#suppressMessages(library(argparse))


#io$outdir <- "data"
#io$trial <- "trained"
#io$data <- "data/all_matrix_list.rds"

#opts$factor <- 10
#opts$scale <- FALSE


# print(py_config())
# print(.libPaths())

my_data <- readRDS(io$data)


for (i in seq(1:length(my_data))) {
    my_data[[i]] <- my_data[[i]][(which(rowSums(my_data[[i]], na.rm = T) != 0)),]
}

#my_data[[2]] <- my_data[[2]][c(-20,-25,-103,-168,-175,-237,-384,-391,-440,-477,-534,-549,-570,-572,-665,-708,-736,-793,-803,-880,-894,-902,-948,-964),]
#my_data[[3]] <- my_data[[3]][c(-53,-125,-150,-167,-177,-378,-472,-486,-492,-530,-531,-535,-572,-579,-596,-672,-682,-709,-799,-813,-966,-992),]
#my_data[[4]] <- my_data[[4]][c(-3,-47,-62,-67,-169,-181,-184,-233,-254,-350,-421,-549,-778,-803,-814,-828,-833,-857,-858,-875,-885,-957,-988),]
#my_data[[5]] <- my_data[[5]][c(-5,-172,-253,-254,-261,-301,-319,-376,-474,-487,-694,-726,-771,-801,-848,-901,-903,-905,-916,-937,-963,-973),]

#my_data[[4]] <- my_data[[4]][-367,]
#my_data[[8]] <- my_data[[8]][-52,]
#my_data[[9]] <- my_data[[9]][-921,]

good_cells <- intersect(intersect(colnames(my_data$rna),colnames(my_data$met_body)), colnames(my_data$acc_body))

# Create MOFAobject
MOFAobject <- create_mofa(list("met_body" = my_data$met_body[,good_cells], "met_H3K27ac" = my_data$met_MCF7_H3K27ac_peaks[,good_cells], "met_promoter" = my_data$met_promoter[,good_cells], "acc_body" = my_data$acc_body[,good_cells], "acc_H3K27ac" = my_data$acc_MCF7_H3K27ac_peaks[,good_cells], "acc_promoter" = my_data$acc_promoter[,good_cells]))

# Data processing options
DataOptions <- get_default_data_options(MOFAobject)
#DataOptions$scaleViews <- opts$scale

# Model options
ModelOptions <- get_default_model_options(MOFAobject)
#ModelOptions$numFactors <- 10

# Training options
TrainOptions <- get_default_training_options(MOFAobject)
#TrainOptions$maxiter <- 5000
#TrainOptions$DropFactorThreshold <- 0.01

# Prepare MOFAobject for training
MOFAmodel <- prepare_mofa(MOFAobject, 
  data_options = DataOptions, 
  model_options = ModelOptions, 
  training_options = TrainOptions
)

# Train the model
outfile <- sprintf("%s/hdf5/noRNA_model_%s.hdf5",io$outdir,io$trial)
model <- run_mofa(MOFAmodel, outfile)










